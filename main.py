import random
from web3 import Web3
from eth_account import Account
import time
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
RPC_URL = "https://ethereum-rpc.publicnode.com"
CONTRACT_ADDRESS = "0x26D85A13212433Fe6A8381969c2B0dB390a0B0ae"

# –ß—Ç–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –∏–∑ —Ñ–∞–π–ª–∞
if not os.path.exists('pk.txt'):
    raise Exception("–§–∞–π–ª pk.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")

with open('pk.txt', 'r') as f:
    private_keys = [line.strip() for line in f.readlines() if line.strip()]

if not private_keys:
    raise Exception("–§–∞–π–ª pk.txt –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–ª—é—á–µ–π")

print(f"–ù–∞–π–¥–µ–Ω–æ {len(private_keys)} –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π")

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ABI —Å —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
contract_abi = [
    {
        "inputs": [],
        "name": "mint",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "isMintingActive",
        "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [{"internalType": "address", "name": "", "type": "address"}],
        "name": "hasMinted",
        "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
        "stateMutability": "view",
        "type": "function"
    }
]

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–ª–æ–∫—á–µ–π–Ω—É
w3 = Web3(Web3.HTTPProvider(RPC_URL))
if not w3.is_connected():
    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–ª–æ–∫—á–µ–π–Ω—É")

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
contract = w3.eth.contract(address = Web3.to_checksum_address(CONTRACT_ADDRESS), abi = contract_abi)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–∏–Ω—Ç–∞
try:
    is_active = contract.functions.isMintingActive().call()
    print(f"–ú–∏–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω: {is_active}")

    if not is_active:
        print("–ú–∏–Ω—Ç–∏–Ω–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç")
        exit()

except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–Ω—Ç–∞: {e}")
    exit()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
successful_mints = 0
failed_mints = 0

for i, private_key in enumerate(private_keys, 1):
    try:
        print(f"\n[{i}/{len(private_keys)}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—à–µ–ª—å–∫–∞...")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        account = Account.from_key(private_key)
        wallet_address = account.address
        print(f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {wallet_address}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–∏–Ω—Ç–∏–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å
        has_minted = contract.functions.hasMinted(wallet_address).call()
        if has_minted:
            print("‚ö†Ô∏è  –£–∂–µ –º–∏–Ω—Ç–∏–ª–∏ —ç—Ç–æ—Ç NFT")
            continue

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–∞–∑–∞ (EIP-1559)
        try:
            base_fee = w3.eth.get_block('latest')['baseFeePerGas']
        except:
            # –ï—Å–ª–∏ baseFeePerGas –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ü–µ–Ω–∫—É
            base_fee = w3.to_wei(2, 'gwei')
        max_priority_fee_per_gas = w3.to_wei(round(random.uniform(0.101, 0.502), 2),
                                             'gwei')  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–µ–º–∏—è –º–∞–π–Ω–µ—Ä—É
        max_fee_per_gas = base_fee + max_priority_fee_per_gas  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ–±—â–∞—è –ø–ª–∞—Ç–∞ –∑–∞ –≥–∞–∑

        print(f"Base fee: {w3.from_wei(base_fee, 'gwei')} Gwei")
        print(f"Max fee: {w3.from_wei(max_fee_per_gas, 'gwei')} Gwei")
        print("-" * 50)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ nonce –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
        nonce = w3.eth.get_transaction_count(wallet_address)

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction = contract.functions.mint().build_transaction({
            'chainId': 1,  # Ethereum Mainnet
            'gas': 200000,  # –õ–∏–º–∏—Ç –≥–∞–∑–∞
            'maxFeePerGas': max_fee_per_gas,
            'maxPriorityFeePerGas': max_priority_fee_per_gas,
            'nonce': nonce,
        })

        # –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        signed_txn = w3.eth.account.sign_transaction(transaction, private_key = private_key)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        tx_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)
        print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: https://etherscan.io/tx/0x{tx_hash.hex()}")

        # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash, timeout = 300)

        if tx_receipt.status == 1:
            print(f"üéâ –ú–∏–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è {wallet_address}")
            successful_mints += 1
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–Ω—Ç–µ –¥–ª—è {wallet_address}")
            failed_mints += 1

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet_address if 'wallet_address' in locals() else '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}: {e}")
        failed_mints += 1

    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    if i < len(private_keys):
        time.sleep(random.uniform(10, 60))

print("\n" + "=" * 50)
print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
print(f"–£—Å–ø–µ—à–Ω—ã—Ö –º–∏–Ω—Ç–æ–≤: {successful_mints}")
print(f"–û—à–∏–±–æ–∫: {failed_mints}")
print(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(private_keys)}")
